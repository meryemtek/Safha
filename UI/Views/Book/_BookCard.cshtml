@model dynamic

@{
    var book = Model.Book;
    var viewModel = Model.Model;
}

<div class="book-card @(viewModel.GetBookStatus(book.Id) switch { 
    Entities.ReadingStatus.WantToRead => "to-read-status", 
    Entities.ReadingStatus.CurrentlyReading => "reading-status", 
    Entities.ReadingStatus.Read => "completed-status", 
    _ => "" 
})" data-id="@book.Id" data-book-id="@book.Id">
    <div class="book-cover">
        <img src="@(string.IsNullOrEmpty(book.CoverImage) ? "/image/default-book-cover.jpg" : book.CoverImage)" 
             alt="@book.Title" />
        <div class="book-overlay">
            <div class="book-actions">
                @if (viewModel.IsCurrentUser)
                {
                    <button class="btn btn-edit" onclick="editBook(@book.Id)" title="DÃ¼zenle">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-delete" onclick="deleteBook(@book.Id)" title="Sil">
                        <i class="fas fa-trash"></i>
                    </button>
                }
                <div class="dropdown">
                    @if (viewModel.IsCurrentUser)
                    {
                        <button class="btn btn-status dropdown-toggle" type="button" id="statusDropdown@(book.Id)" data-bs-toggle="dropdown" aria-expanded="false">
                            <span class="status-icon">@GetStatusIcon(viewModel.GetBookStatus(book.Id))</span>
                            <span class="status-text d-none d-md-inline">@GetStatusText(viewModel.GetBookStatus(book.Id))</span>
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="statusDropdown@(book.Id)">
                            <li><button class="dropdown-item @(viewModel.GetBookStatus(book.Id) == Entities.ReadingStatus.WantToRead ? "active" : "")" 
                                       onclick="updateBookStatus(@book.Id, @((int)Entities.ReadingStatus.WantToRead))" 
                                       data-status="@((int)Entities.ReadingStatus.WantToRead)">
                                <i class="fas fa-bookmark"></i> OkuyacaklarÄ±m
                            </button></li>
                            <li><button class="dropdown-item @(viewModel.GetBookStatus(book.Id) == Entities.ReadingStatus.CurrentlyReading ? "active" : "")" 
                                       onclick="updateBookStatus(@book.Id, @((int)Entities.ReadingStatus.CurrentlyReading))" 
                                       data-status="@((int)Entities.ReadingStatus.CurrentlyReading)">
                                <i class="fas fa-book-reader"></i> Okuyorum
                            </button></li>
                            <li><button class="dropdown-item @(viewModel.GetBookStatus(book.Id) == Entities.ReadingStatus.Read ? "active" : "")" 
                                       onclick="updateBookStatus(@book.Id, @((int)Entities.ReadingStatus.Read))" 
                                       data-status="@((int)Entities.ReadingStatus.Read)">
                                <i class="fas fa-check-circle"></i> OkuduklarÄ±m
                            </button></li>
                        </ul>
                    }
                    else
                    {
                        <span class="btn btn-status">
                            <span class="status-icon">@GetStatusIcon(viewModel.GetBookStatus(book.Id))</span>
                            <span class="status-text d-md-inline">@GetStatusText(viewModel.GetBookStatus(book.Id))</span>
                        </span>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="book-info">
        <h3 class="book-title">@book.Title</h3>
        <p class="book-author">@book.Author</p>
        @if (!string.IsNullOrEmpty(book.Genre))
        {
            <span class="book-genre">@book.Genre</span>
        }
        @if (book.PublicationYear != null && book.PublicationYear > 0)
        {
            <p class="book-year">@book.PublicationYear</p>
        }
        @if (!string.IsNullOrEmpty(book.Description))
        {
            <p class="book-description">
                @(book.Description.Length > 100 ? book.Description.Substring(0, 100) + "..." : book.Description)
            </p>
        }
        <div class="book-meta">
            <span class="meta-item">
                <i class="fas fa-calendar"></i> @book.CreatedAt.ToString("dd MMM yyyy")
            </span>
            @if (book.Pages != null && book.Pages > 0)
            {
                <span class="meta-item">
                    <i class="fas fa-file-alt"></i> @book.Pages sayfa
                </span>
            }
            @{
                var bookStatus = viewModel.GetBookStatus(book.Id);
                if (bookStatus != null)
                {
                    <span class="meta-item book-status">
                        @GetStatusIcon(bookStatus) @GetStatusText(bookStatus)
                    </span>
                }
            }
        </div>
    </div>
</div>

@functions {
    string GetStatusIcon(Entities.ReadingStatus? status)
    {
        if (status == null)
            return "ðŸ“š";
            
        return status switch
        {
            Entities.ReadingStatus.WantToRead => "ðŸ“š",
            Entities.ReadingStatus.CurrentlyReading => "ðŸ“–",
            Entities.ReadingStatus.Read => "âœ…",
            _ => "ðŸ“š"
        };
    }
    
    string GetStatusText(Entities.ReadingStatus? status)
    {
        if (status == null)
            return "";
            
        return status switch
        {
            Entities.ReadingStatus.WantToRead => "OkuyacaklarÄ±m",
            Entities.ReadingStatus.CurrentlyReading => "Okuyorum",
            Entities.ReadingStatus.Read => "OkuduklarÄ±m",
            _ => ""
        };
    }
}
